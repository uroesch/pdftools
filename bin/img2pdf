#!/usr/bin/env bash

# ------------------------------------------------------------------------------
# A script to convert PNG, TIFF or JPEG to PDF files. 
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Author:        Urs Roesch <github@bun.ch>
# License:       MIT
# Requires:      bash, ImageMagick, pdfcat, pdftk
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Setup
# ------------------------------------------------------------------------------
set -o nounset
set -o errexit
set -o pipefail

# ------------------------------------------------------------------------------
# Globals
# ------------------------------------------------------------------------------
declare -r SCRIPT=${0##*/}
declare -r VERSION=0.2.1
declare -r AUTHOR="Urs Roesch <github@bun.ch>"
declare -r LICENSE="MIT"
declare -g IMAGE_COMPRESSION=${PDF_IMAGE:-jpeg}
declare -g IMAGE_QUALITY=${IMAGE_QUALITY:-90}
declare -g IMAGE_ROTATE=""
declare -g PDF_PREFIX=""
declare -g OUTPUT=""
declare -g DELETE_IMAGES=false
declare -a IMAGES=()
declare -a DEPENDENCIES=(
  identify
  convert
  pdfcat
)
declare -a INCLUDES=(
  pdfcat
)

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------

function check_dependencies() {
  for dependency in ${DEPENDENCIES[*]}; do
    if ! which ${dependency} >/dev/null 2>&1; then
      echo "Missing dependency '${dependency}'" 1>&2
      echo "Please install first!" 1>&2
      exit 64
    fi
  done
}

# ------------------------------------------------------------------------------

function version() {
  printf "%s v%s\nCopyright (c) %s\nLicense - %s\n" \
    "${SCRIPT}" "${VERSION}" "${AUTHOR}" "${LICENSE}"
  exit 0
}

# ------------------------------------------------------------------------------

function source_includes() {
  for include in ${INCLUDES[*]}; do
    local path=$( which ${include} 2>/dev/null )
    [[ -n ${path} ]] && source ${path}
  done
}

# ------------------------------------------------------------------------------

function usage() {
  local exit_code=$1
  cat <<USAGE

  Usage:
    ${SCRIPT} <options> <img-file> [<img-file> ... ]

  Options:
    -h  | --help           This message
    -d  | --delete         Delete the images after creating the PDF file.
    -o  | --output <name>  Write the output to specified file <name>.
    -r  | --rotate <value> Rotate the image by <value>
                           Where value can be a positive or negative integer
                           between 0 and 360.
    -V  | --version        Display version and exit

USAGE
  exit ${exit_code}
}

# ------------------------------------------------------------------------------

function check_image() {
  local image="$1"
  ftype=$( identify -format %m ${image} 2>/dev/null )
  case ${ftype} in
  PNG|TIF*)
    IMAGE_COMPRESSION=lzw
    IMAGE_QUALITY=9
    return 0
    ;;
  JPEG)
    IMAGE_COMPRESSION=jpeg
    IMAGE_QUALITY=90
    return 0
    ;;
  PDF|*)
    return 1
    ;;
  esac
}

# ------------------------------------------------------------------------------

function parse_options() {
  if [ $# -lt 1 ]; then
     usage 1
  fi
  while [ $# -gt 0 ]; do
    case $1 in
    -h|--help)    usage 0;;
    -d|--delete)  DELETE_IMAGES=true;;
    -r|--rotate)  shift; IMAGE_ROTATE=$1;;
    -o|--output)  shift; OUTPUT=$1; PDF_PREFIX="$$-${RANDOM}-";;
    -V|--version) version;;
    *)            IMAGES=( "${IMAGES[@]-}" "$1" );;
    esac
    shift
  done
  IMAGES=( "${IMAGES[@]:1}" )
}

# ------------------------------------------------------------------------------

function temporary_pdf() {
  local image=${1}; shift
  local path=${image%/*}
  local basename=${image##*/}
  echo "${path:-.}/${PDF_PREFIX}${basename%.*}.pdf"
}

# ------------------------------------------------------------------------------

function create_pdf() {
  local    dest="$( [[ -n ${OUTPUT} ]] && echo ${OUTPUT} || echo ${IMAGES[0]} )"
  local -a pdfs=()
  for image in "${IMAGES[@]}"; do
    check_image "${image}" || continue
    pdf=$(temporary_pdf "${image}")
    convert "${image}" \
      ${IMAGE_ROTATE:+-rotate ${IMAGE_ROTATE}} \
      -compress ${IMAGE_COMPRESSION} \
      -quality ${IMAGE_QUALITY} \
      "${pdf}"
    pdfs=( "${pdfs[@]:-}" "${pdf}" )
  done
  [[ -z ${OUTPUT} ]] && return 0
  pdfcat::concat_pdf "${pdfs[@]:1}" > "${dest}-$$"
  rm "${pdfs[@]:1}" 2>/dev/null
  mv "${dest}-$$" "${dest%.*}.pdf"
}

# ------------------------------------------------------------------------------

function delete_images() {
  ## delete the original images
  if [ ${DELETE_IMAGES} = true ]; then
    rm "${IMAGES[@]}"
  fi
}

# ------------------------------------------------------------------------------
# Main
# ------------------------------------------------------------------------------
check_dependencies
source_includes
parse_options "$@"
create_pdf
delete_images
