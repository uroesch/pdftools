#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# A utility to run a scanned PDF through tesseract's OCR engine and make it
# searchable.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Author:        Urs Roesch <github@bun.ch>
# License:       MIT
# Requires:      bash, pdfcat, pdfimages (poppler-utils), pdftk, tesseract
# -----------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Settings
# ------------------------------------------------------------------------------
set -o nounset
set -o errexit
set -o pipefail

trap cleanup EXIT

# ------------------------------------------------------------------------------
# Globals
# ------------------------------------------------------------------------------
declare -r SCRIPT=${0##*/}
declare -r VERSION=0.3.1
declare -r AUTHOR="Urs Roesch <github@bun.ch>"
declare -r LICENSE="MIT"
declare -a PDF_FILES=()
declare    EXTENSION=pdf
declare -a INCLUDES=(
  pdfcat
)
declare -a DEPENDENCIES=(
  pdfcat
  pdfimages
  pdftk
  tesseract
)

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------

function check_dependencies() {
  for dependency in ${DEPENDENCIES[@]}; do
    if ! which ${dependency} >/dev/null 2>&1; then
      echo "Missing dependency '${dependency}'" 1>&2
      echo "Please install first!" 1>&2
      exit 64
    fi
  done
}

# ------------------------------------------------------------------------------

function source_includes() {
  for include in ${INCLUDES[@]}; do
    local path=$( which ${include} 2>/dev/null )
    [[ -n ${path} ]] && source ${path}
  done
}

# ------------------------------------------------------------------------------

function determine_ocr_languages() {
  OCR_LANG=$(
    sed 's/ /+/g' <<< $( echo $( tesseract --list-langs 2>&1 | grep "^...$" ) )
  )
}

# ------------------------------------------------------------------------------

function run_ocr() {
  local filename="${1}"; shift;
  tesseract -l ${OCR_LANG} "${filename}" "${filename%%.*}" pdf >/dev/null 2>&1
  if [[ $? -eq 0 ]]; then
    rm "${filename}"
  else
    echo "An error occured during character recogntion." 1>&2
    echo "Please investigate!" 1>&2
    echo "Leaving original image '${filename}' intact" 1>&2
    exit 128
  fi
}

# ------------------------------------------------------------------------------

function version() {
  printf "%s v%s\nCopyright (c) %s\nLicense - %s\n" \
    "${SCRIPT}" "${VERSION}" "${AUTHOR}" "${LICENSE}"
  exit 0
}

# ------------------------------------------------------------------------------

function usage() {
  local exit_code=${1:-}
  cat <<USAGE

  Usage:
    ${SCRIPT} [options] <file> [<file> [,,]]

  Options:
    -h | --help         This message
    -V | --version      Print version information and exit
    -l | --lang <lang>  Set the OCR languages to use.
                        For multiple languages concatenate with a '+'
                        E.g eng+deu for English and German
                        Default: ${OCR_LANG}

  Description:
    Runs PDFs through OCR and saves the output as a text searchable PDF
    with the same name.

  Disclaimer:
    Only works with PDFs comprised of a single JPEG, LZW or ZIP compressed
    image per page.
    LZW compressed images will be converted to ZIP compressed ones during
    the OCR process.

USAGE
  exit ${exit_code}
}

# ------------------------------------------------------------------------------

function check_compatibility() {
  local file="${1}"; shift;
  ## check if all the images are single jpegs
  pdfimages -list "${file}" | \
    awk \
      '/^ +[0-9]/{p=$1; c++; $9 ~ /^(jpeg|image)$/ && j++ }
       END { if (p < c && p == j) {exit 1} }'
}

# ------------------------------------------------------------------------------

function ocr_pdfs() {
  for file in "${PDF_FILES[@]}"; do
    if ! check_compatibility "${file}"; then
      echo "${file} is not compatible; skipping!"
      continue
    fi
    workname="$$-${RANDOM}"
    meta="$(pdfcat::fetch_meta "${file}")"
    pdfimages -all "${file}" "${workname}" 2>/dev/null &&
    for image in ${workname}*; do
      run_ocr ${image}
    done
    post_process_pdf "${file}" "${workname}" "${meta}"
  done
}

# ------------------------------------------------------------------------------

function post_process_pdf() {
  local file="${1}"; shift;
  local workname="${1}"; shift;
  local meta="${1}"; shift;
  merge_pdf "${workname}.${EXTENSION}" ${workname}*
  pdftk "${workname}.pdf" \
    update_info_utf8 <( echo "${meta}" ) \
    output "${file}" 2>/dev/null
  rm "${workname}.pdf"
}

# ------------------------------------------------------------------------------

function merge_pdf() {
  local filename="${1}"; shift;
  local documents=( "${@}" ); shift;
  if [[ ${#documents[@]} -eq 1 ]]; then
    mv "${documents[0]}" "${filename}" 2>/dev/null
  else
    pdfcat::concat_pdf "${documents[@]}" > "${filename}" &&
      rm "${documents[@]}" 2>/dev/null
  fi
}

# ------------------------------------------------------------------------------

function parse_options() {
 [[ ${#} -lt 1 ]] && usage 1
  while [[ ${#} -gt 0 ]]; do
    case ${1} in
    -V|--version) version;;
    -l|--lang)    shift; OCR_LANG=${1};;
    -h|--help)    usage 0;;
    *)            PDF_FILES+=( "${1}" );;
    esac
    shift
  done
}

# ------------------------------------------------------------------------------

function cleanup() {
  local exit_code=$?
  rm $$-[0-9]*.{jpg,pdf} 2>/dev/null || :
  exit ${exit_code}
}

# ------------------------------------------------------------------------------
# Main
# ------------------------------------------------------------------------------
check_dependencies
source_includes
determine_ocr_languages
parse_options "${@}"
ocr_pdfs
