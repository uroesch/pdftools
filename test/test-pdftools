#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# Setup
# -----------------------------------------------------------------------------
set -o errexit
set -o nounset
set -o pipefail

trap test::final_message EXIT

# -----------------------------------------------------------------------------
# Globals
# -----------------------------------------------------------------------------
declare -r TEST_SCRIPT=${0##*/}
declare -r TEST_DIR=$(readlink -f $(dirname ${0}))
declare -r TEST_PDF=lorem-ipsum.pdf
declare -r BIN_DIR=$(readlink -f ${TEST_DIR}/../bin)
declare -r WORK_DIR="$(dirname ${0})/.."
declare -r TEMP_DIR=${HOME}/tmp
declare -r PREFIX_DIR=pdftools-
declare -r BASE_DIR=${TEMP_DIR}/${PREFIX_DIR}${RANDOM}
declare -r DELIMITER=$(printf "%0.1s" -{1..80})
declare    FINAL_MESSAGE=true
declare    SAMPLE_PDF=${BASE_DIR}/${TEST_PDF}

# -----------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------
function usage() {
  local exit_code=${1:-1}
  FINAL_MESSAGE=false
  cat <<USAGE

  Usage:
    ${TEST_SCRIPT} [options]

  Options:
    -c | --clean   Cleanup previous test directories
    -h | --help    This message

USAGE
  exit ${exit_code}
}

function parse_options() {
  (( ${#} == 0 )) && return 0
  while (( ${#} > 0 )); do
    case ${1} in
    -c|--clean) test::clean;;
    -h|--help)  usage 0;;
    *)          usage 0;;
    esac
    shift
  done
}

function ::message() {
  local message=${1}; shift;
  printf "%-50s" "${message}"
}

function ::result() {
  local exit_code=${1}; shift
  local result
  local code
  case ${exit_code} in
  0) code=32; result="SUCCESS";;
  *) code=31; result="FAILURE";;
  esac
  printf "%b[ %s ]%b\n" "\e[${code}m" ${result} "\e[0m"
}

function test::clean() {
  local dirs=$(find ${TEMP_DIR} -maxdepth 1 -type d -name "${PREFIX_DIR}*")
  for dir in ${dirs}; do
    echo "Removing directory '${dir}'"
    rm -rf ${dir}
  done
  FINAL_MESSAGE=false
  exit 0
}

function test::setup() {
  # set path to repository directory
  export PATH=${BIN_DIR}:${PATH}
  [[ ! -d ${BASE_DIR} ]] && mkdir -p ${BASE_DIR}
}

function test::final_message() {
  local exit_code=$?
  local format="%b${DELIMITER}\n%s\n${DELIMITER}%b\n"
  [[ ${FINAL_MESSAGE} != true ]] && return 0
  if (( ${exit_code} > 0 )); then
    printf "${format}" \
      "\e[31m" "There were errors while executing the test suite" "\e[0m"
  else
    printf "${format}" "\e[32m" "All test passed" "\e[0m"
  fi
  exit ${exit_code}
}

function test::is_pdf() {
  local pdf=${1}
  file ${pdf} | grep -q 'PDF document' 2>/dev/null
}

function test::copy_sample_pdf() {
  ::message "Test copy sample pdf"
  cp ${TEST_DIR}/${TEST_PDF} ${SAMPLE_PDF}
  ::result $?
}

function test::pdf_to_images() {
  ::message "Test pdf to images"
  pdftocairo \
   -jpeg \
   ${SAMPLE_PDF} \
   ${BASE_DIR}/sample-image
  ::result $?
}

function test::img2pdf() {
  ::message "Test img2pdf"
  img2pdf \
    --output ${BASE_DIR}/img2pdf.pdf \
    $(find ${BASE_DIR} -type f -name "*jpg")
  ::result $?
}

function test::verify_img2pdf() {
  ::message "Test verify img2pdf"
  test::is_pdf ${BASE_DIR}/img2pdf.pdf
  ::result $?
}

function test::ocrpdf() {
  ::message "Test ocrpdf"
  cp ${BASE_DIR}/img2pdf.pdf ${BASE_DIR}/ocrpdf.pdf
  ocrpdf -q ${BASE_DIR}/ocrpdf.pdf
  ::result $?
}

function test::verify_ocrpdf() {
  ::message "Test verify ocrpdf"
  local count=0
  test::is_pdf ${BASE_DIR}/ocrpdf.pdf
  pdftotext ${BASE_DIR}/ocrpdf.pdf
  count=$(grep -c "Lorem ipsum" ${BASE_DIR}/ocrpdf.txt 2>/dev/null)
  (( count == 10 ))
  ::result $?
}

function test::pdfresize() {
  ::message "Test pdfresize"
  pdfresize \
    --quality screen \
    --input ${BASE_DIR}/img2pdf.pdf \
    --output ${BASE_DIR}/pdfresize.pdf
  ::result $?
}

function test::verify_pdfresize() {
  ::message "Test verify pdfresize"
  test::is_pdf ${BASE_DIR}/pdfresize.pdf
  local size_before=$(du -k ${BASE_DIR}/img2pdf.pdf | cut -f 1 )
  local size_after=$(du -k ${BASE_DIR}/pdfresize.pdf | cut -f 1 )
  (( size_before > size_after ))
  ::result $?
}

function test::pdf2pdfa() {
  ::message "Test pdf2pdfa"
  pdf2pdfa ${BASE_DIR}/img2pdf.pdf
  mv ${BASE_DIR}/img2pdf_a.pdf ${BASE_DIR}/pdf2pdfa.pdf
  ::result $?
}

function test::verify_pdf2pdfa() {
  ::message "Test verify pdf2pdfa"
  # no tool present to verify if PDF/A
  test::is_pdf ${BASE_DIR}/pdf2pdfa.pdf
  ::result $?
}

function test::pdfmeta() {
  ::message "Test pdfmeta"
  cp ${BASE_DIR}/img2pdf.pdf ${BASE_DIR}/pdfmeta.pdf
  pdfmeta \
    --creator "pdfmeta-$$" \
    ${BASE_DIR}/pdfmeta.pdf
  ::result $?
}

function test::verify_pdfmeta() {
  ::message "Test verify pdfmeta"
  test::is_pdf ${BASE_DIR}/pdfmeta.pdf
  # for some yet unknown reason `grep -q` croaks on alpine
  # hence the redirect to /dev/null
  pdfinfo ${BASE_DIR}/pdfmeta.pdf | grep -E "Creator:.*pdfmeta-$$" &>/dev/null
  ::result $?
}
# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------
parse_options "$@"
test::setup
test::copy_sample_pdf
test::pdf_to_images
test::img2pdf
test::verify_img2pdf
test::ocrpdf
test::verify_ocrpdf
test::pdfresize
test::verify_pdfresize
test::pdf2pdfa
test::verify_pdf2pdfa
test::pdfmeta
test::verify_pdfmeta
